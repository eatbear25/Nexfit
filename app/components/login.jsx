"use client";

import React, { useState } from "react";
import { Button } from "./ui/button";
import Link from "next/link";
import Image from "next/image";
import SignupModal from "./signup";
import ForgotPasswordModal from "./ForgotPassword";
import { toast } from "sonner";
import { PiEyesFill } from "react-icons/pi";
import { signInWithPopup, GoogleAuthProvider } from "firebase/auth";
import { auth } from "@/lib/firebase";
import { useAuth } from "@/app/contexts/AuthContext"; // ‰ΩøÁî® AuthContext

function LoginModal({ isOpen, onClose }) {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [showSignup, setShowSignup] = useState(false);
  const [showForgotPassword, setShowForgotPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [isFlipping, setIsFlipping] = useState(false);
  const [isClosing, setIsClosing] = useState(false);
  const [isGoogleLoading, setIsGoogleLoading] = useState(false);

  // ‰ΩøÁî® AuthContext
  const { login, loginWithFirebase } = useAuth();

  // Google ÁôªÂÖ•ËôïÁêÜÂáΩÊï∏Ôºà‰ΩøÁî® Firebase + AuthContextÔºâ
  const handleGoogleLogin = async () => {
    try {
      setIsGoogleLoading(true);
      console.log("=== ÈñãÂßã Firebase Google ÁôªÂÖ• ===");

      const provider = new GoogleAuthProvider();
      provider.setCustomParameters({
        prompt: "select_account",
      });

      const result = await signInWithPopup(auth, provider);
      const user = result.user;

      console.log("Firebase ÁôªÂÖ•ÊàêÂäü:", {
        uid: user.uid,
        email: user.email,
        displayName: user.displayName,
        photoURL: user.photoURL,
        emailVerified: user.emailVerified,
      });

      // Áç≤Âèñ Firebase Token
      const token = await user.getIdToken();

      // Â∞áÁî®Êà∂Ë≥áË®ä‰øùÂ≠òÂà∞Ë≥áÊñôÂ∫´
      console.log("ÈñãÂßã‰øùÂ≠òÁî®Êà∂Ë≥áÊñôÂà∞Ë≥áÊñôÂ∫´...");
      const saveResult = await saveUserToDatabase(user);

      if (saveResult.success) {
        console.log("Ë≥áÊñôÂ∫´‰øùÂ≠òÊàêÂäüÔºå‰ΩøÁî® AuthContext ÁôªÂÖ•");

        // ‰ΩøÁî® AuthContext ÁöÑ loginWithFirebase ÊñπÊ≥ï
        const authResult = await loginWithFirebase(user, token);

        if (authResult.success) {
          toast.success(`Google ÁôªÂÖ•ÊàêÂäüÔºåÊ≠°Ëøé ${user.displayName}ÔºÅ`);
          onClose();
        } else {
          throw new Error(authResult.error || "AuthContext ÁôªÂÖ•Â§±Êïó");
        }
      } else {
        console.error("Ë≥áÊñôÂ∫´‰øùÂ≠òÂ§±Êïó:", saveResult);
        // Âç≥‰ΩøË≥áÊñôÂ∫´‰øùÂ≠òÂ§±ÊïóÔºå‰ªçÁÑ∂ÂòóË©¶ÁôªÂÖ•
        const authResult = await loginWithFirebase(user, token);
        if (authResult.success) {
          toast.success(`Google ÁôªÂÖ•ÊàêÂäüÔºåÊ≠°Ëøé ${user.displayName}ÔºÅ`);
          onClose();
        } else {
          throw new Error("ÁôªÂÖ•ÈÅéÁ®ãÁôºÁîüÈåØË™§");
        }
      }
    } catch (error) {
      console.error("Firebase Google ÁôªÂÖ•ÈåØË™§:", error);

      if (error.code === "auth/popup-closed-by-user") {
        toast.error("ÁôªÂÖ•Ë¶ñÁ™óË¢´ÈóúÈñâ");
      } else if (error.code === "auth/popup-blocked") {
        toast.error("ÂΩàÂá∫Ë¶ñÁ™óË¢´ÈòªÊìãÔºåË´ãÂÖÅË®±ÂΩàÂá∫Ë¶ñÁ™ó");
      } else if (error.code === "auth/cancelled-popup-request") {
        toast.error("ÁôªÂÖ•Ë´ãÊ±ÇË¢´ÂèñÊ∂à");
      } else {
        toast.error(`Google ÁôªÂÖ•Â§±Êïó: ${error.message}`);
      }
    } finally {
      setIsGoogleLoading(false);
    }
  };

  // Â∞á Firebase Áî®Êà∂‰øùÂ≠òÂà∞Ë≥áÊñôÂ∫´
  const saveUserToDatabase = async (firebaseUser) => {
    try {
      console.log("ÂëºÂè´ API ‰øùÂ≠òÁî®Êà∂Ë≥áÊñô...");

      const requestBody = {
        uid: firebaseUser.uid,
        email: firebaseUser.email,
        name: firebaseUser.displayName,
        image: firebaseUser.photoURL,
        emailVerified: firebaseUser.emailVerified,
      };

      console.log("API Ë´ãÊ±ÇË≥áÊñô:", requestBody);

      const response = await fetch("/api/save-firebase-user", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody),
      });

      console.log("API ÂõûÊáâÁãÄÊÖã:", response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error("API ÈåØË™§ÂõûÊáâ:", errorText);
        return {
          success: false,
          error: `API Ë´ãÊ±ÇÂ§±Êïó: ${response.status} - ${errorText}`,
        };
      }

      const result = await response.json();
      console.log("API ÂõûÊáâË≥áÊñô:", result);

      return { success: true, data: result };
    } catch (error) {
      console.error("‰øùÂ≠òÁî®Êà∂Ë≥áÊñôÈåØË™§:", error);
      return {
        success: false,
        error: error.message,
      };
    }
  };

  // üî• ‰∏ÄËà¨ÁôªÂÖ•ËôïÁêÜÂáΩÊï∏Ôºà‰ΩøÁî® AuthContextÔºâ- ÂåÖÂê´ÂÆåÊï¥Ë™øË©¶
  const handleLogin = async () => {
    if (!email || !password) {
      toast.error("Ë´ãÂ°´ÂØ´ÂÆåÊï¥ÁöÑÁôªÂÖ•Ë≥áË®ä");
      return;
    }

    if (!email.includes("@")) {
      toast.error("Ë´ãËº∏ÂÖ•ÊúâÊïàÁöÑÈõªÂ≠ê‰ø°ÁÆ±");
      return;
    }

    try {
      setIsLoading(true);

      console.log("üîÑ === LoginModal ÈñãÂßãÁôªÂÖ•ÊµÅÁ®ã ===");
      console.log("üìß ÁôªÂÖ•Ë≥áÊñô:", { email, password: "***" });
      console.log("üïê ÈñãÂßãÊôÇÈñì:", new Date().toISOString());

      // ‰ΩøÁî® AuthContext ÁöÑ login ÊñπÊ≥ï
      console.log("üìû ÂëºÂè´ AuthContext.login()...");
      const result = await login({ email, password });

      console.log("üîç === LoginModal Êî∂Âà∞ÁöÑÂÆåÊï¥ÁµêÊûú ===");
      console.log("ÂÆåÊï¥ÁµêÊûúÁâ©‰ª∂:", JSON.stringify(result, null, 2));
      console.log("- result.success:", result.success);
      console.log("- result.user:", result.user);
      console.log("- result.error:", result.error);
      console.log("- typeof result:", typeof result);
      console.log("- Object.keys(result):", Object.keys(result || {}));

      // Ê™¢Êü• localStorage ‰∏≠ÁöÑ token
      const storedToken = localStorage.getItem("token");
      console.log(
        "üíæ localStorage ‰∏≠ÁöÑ token:",
        storedToken ? `Â≠òÂú®(${storedToken.substring(0, 20)}...)` : "‰∏çÂ≠òÂú®"
      );

      if (result && result.success === true) {
        console.log("‚úÖ LoginModal: ÁôªÂÖ•ÊàêÂäüËôïÁêÜÈñãÂßã");
        console.log("üë§ ÁôªÂÖ•Áî®Êà∂Ë≥áÊñô:", result.user);

        // ÈóúÈñâÊ®°ÊÖãÊ°Ü
        console.log("üö™ ÈóúÈñâÁôªÂÖ•Ê®°ÊÖãÊ°Ü");
        onClose();

        // È°ØÁ§∫ÊàêÂäüË®äÊÅØ
        const displayName =
          result.user?.nickname || result.user?.name || email.split("@")[0];
        console.log("üéâ È°ØÁ§∫ÊàêÂäüË®äÊÅØÔºåÁî®Êà∂:", displayName);
        toast.success(`ÁôªÂÖ•ÊàêÂäüÔºåÊ≠°Ëøé ${displayName} Âõû‰æÜÔºÅ`);
      } else {
        console.error("‚ùå LoginModal: ÁôªÂÖ•Â§±ÊïóËôïÁêÜÈñãÂßã");
        console.error("Â§±ÊïóÂéüÂõ†:", result?.error || "Êú™Áü•ÈåØË™§");

        // ËôïÁêÜ‰∏çÂêåÈ°ûÂûãÁöÑÈåØË™§
        let errorMessage = "ÁôªÂÖ•Â§±ÊïóÔºåË´ãÊ™¢Êü•Â∏≥ËôüÂØÜÁ¢º";

        if (result?.error) {
          if (result.error.includes("Áî®Êà∂Â∏≥ËôüÂ∑≤Ë¢´Âà™Èô§")) {
            errorMessage = "Áî®Êà∂Â∏≥ËôüÂ∑≤Ë¢´Âà™Èô§ÔºåË´ãÈáçÊñ∞Ë®ªÂÜä";
          } else if (result.error.includes("Â∏≥ËôüÊàñÂØÜÁ¢ºÈåØË™§")) {
            errorMessage = "Â∏≥ËôüÊàñÂØÜÁ¢ºÈåØË™§ÔºåË´ãÈáçÊñ∞Ëº∏ÂÖ•";
          } else if (
            result.error.includes("ÁôªÂÖ•ÊúçÂãôÊö´ÊôÇ‰∏çÂèØÁî®") ||
            result.error.includes("ÁôªÂÖ•ÂäüËÉΩÊö´ÊôÇÁÑ°Ê≥ï‰ΩøÁî®")
          ) {
            errorMessage = "ÁôªÂÖ•ÊúçÂãôÊö´ÊôÇ‰∏çÂèØÁî®ÔºåË´ãÁ®çÂæåÂÜçË©¶";
          } else if (
            result.error.includes("ÈüøÊáâÊ†ºÂºèÈåØË™§") ||
            result.error.includes("‰º∫ÊúçÂô®ÈüøÊáâÊ†ºÂºèÈåØË™§")
          ) {
            errorMessage = "‰º∫ÊúçÂô®ÈüøÊáâÊ†ºÂºèÈåØË™§ÔºåË´ãËÅØÁπ´ÊäÄË°ìÊîØÊè¥";
          } else if (result.error.includes("Á∂≤Ë∑ØÈÄ£Á∑öÈåØË™§")) {
            errorMessage = "Á∂≤Ë∑ØÈÄ£Á∑öÈåØË™§ÔºåË´ãÊ™¢Êü•Á∂≤Ë∑ØÁãÄÊÖã";
          } else if (
            result.error.includes("API ÈüøÊáâÊ†ºÂºè‰∏çÊ≠£Á¢∫") ||
            result.error.includes("Áº∫Â∞ëË™çË≠â token")
          ) {
            errorMessage = "API ÈüøÊáâÊ†ºÂºèÈåØË™§ÔºåË´ãÊ™¢Êü•ÂæåÁ´ØÈÖçÁΩÆ";
          } else if (
            result.error.includes("API ‰∏çÂ≠òÂú®") ||
            result.error.includes("ÁôªÂÖ•ÂäüËÉΩÈÖçÁΩÆÈåØË™§")
          ) {
            errorMessage = "ÁôªÂÖ•ÂäüËÉΩÈÖçÁΩÆÈåØË™§ÔºåË´ãËÅØÁπ´Á≥ªÁµ±ÁÆ°ÁêÜÂì°";
          } else {
            errorMessage = result.error;
          }
        }

        console.log("üì¢ È°ØÁ§∫ÈåØË™§Ë®äÊÅØ:", errorMessage);
        toast.error(errorMessage);
      }
    } catch (error) {
      console.error("‚ùå === LoginModal ÁôªÂÖ•ÈÅéÁ®ãÁôºÁîüÁï∞Â∏∏ ===");
      console.error("Áï∞Â∏∏Ë©≥ÊÉÖ:", error);
      console.error("Áï∞Â∏∏Â†ÜÁñä:", error.stack);
      toast.error("ÁôªÂÖ•ÈÅéÁ®ãÁôºÁîüÊú™È†êÊúüÁöÑÈåØË™§");
    } finally {
      console.log("üèÅ LoginModal ÁôªÂÖ•ÊµÅÁ®ãÁµêÊùü");
      setIsLoading(false);
    }
  };

  // ËôïÁêÜ Enter ÈçµÁôªÂÖ•
  const handleKeyPress = (e) => {
    if (e.key === "Enter") {
      handleLogin();
    }
  };

  const handleSignupClick = () => {
    setIsFlipping(true);
    setTimeout(() => {
      setShowSignup(true);
      setIsFlipping(false);
    }, 300);
  };

  const handleClose = () => {
    setIsClosing(true);
    setTimeout(() => {
      onClose();
      setIsClosing(false);
      // ÈáçÁΩÆË°®ÂñÆ
      setEmail("");
      setPassword("");
      setShowPassword(false);
    }, 300);
  };

  if (!isOpen) {
    return null;
  }

  if (showSignup) {
    return (
      <SignupModal
        isOpen={isOpen}
        onClose={onClose}
        setShowLogin={() => setShowSignup(false)}
      />
    );
  }

  if (showForgotPassword) {
    return (
      <ForgotPasswordModal
        isOpen={isOpen}
        onClose={() => {
          setShowForgotPassword(false);
          onClose();
        }}
      />
    );
  }

  return (
    <div className="fixed inset-0 z-50 bg-black/60 flex items-center justify-center p-4">
      <div
        className={`bg-white rounded-lg shadow-xl p-4 sm:p-8 w-full max-w-md relative
          ${isFlipping ? "animate-flip-out" : "animate-flip-in"}
          ${isClosing ? "animate-fade-out" : ""}`}
        style={{ perspective: "1000px", transformOrigin: "center center" }}
      >
        <button
          onClick={handleClose}
          className="absolute top-2 right-3 sm:top-3 sm:right-5 text-gray-500 text-2xl bg-transparent border-none cursor-pointer hover:text-gray-700"
        >
          √ó
        </button>
        <h2 className="text-3xl sm:text-[40px] font-bold my-3 sm:my-5 text-center text-[#333333]">
          ÁôªÂÖ•Âà∞ NEXFIT
        </h2>

        <div className="flex justify-center">
          <Link href="#">
            <p className="relative mr-4 sm:mr-6 mb-6 sm:mb-10 text-xl sm:text-2xl opacity-100 text-black after:content-[''] after:absolute after:left-0 after:bottom-0 after:h-[2px] after:w-full after:bg-[#a9ba5c]">
              ÁôªÂÖ•
            </p>
          </Link>
          <Link href="#" onClick={handleSignupClick}>
            <p className="relative mr-4 sm:mr-6 mb-4 sm:mb-5 text-xl sm:text-2xl opacity-60 hover:opacity-100 text-black after:content-[''] after:absolute after:left-1/2 after:bottom-0 after:h-[2px] after:w-0 after:bg-[#a9ba5c] after:transition-all after:duration-300 hover:after:left-0 hover:after:w-full">
              Ë®ªÂÜä
            </p>
          </Link>
        </div>

        <div className="mb-4">
          <label
            htmlFor="email"
            className="block text-[#444444] text-base sm:text-lg font-medium mb-2"
          >
            ÈõªÂ≠ê‰ø°ÁÆ±
          </label>
          <input
            type="text"
            id="email"
            className="border-b w-full py-2 px-3 text-[#333333] leading-tight focus:outline-none focus:border-[#a9ba5c] transition-colors"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            onKeyPress={handleKeyPress}
            disabled={isLoading}
            placeholder="Ë´ãËº∏ÂÖ•ÊÇ®ÁöÑÈõªÂ≠ê‰ø°ÁÆ±"
          />
        </div>

        <div className="mb-4 sm:mb-6 relative">
          <label
            htmlFor="password"
            className="block text-[#444444] text-base sm:text-lg font-medium mb-2"
          >
            ÂØÜÁ¢º
          </label>
          <div className="relative">
            <input
              type={showPassword ? "text" : "password"}
              id="password"
              className="border-b w-full py-2 px-3 pr-10 text-[#333333] leading-tight focus:outline-none focus:border-[#a9ba5c] transition-colors"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              onKeyPress={handleKeyPress}
              disabled={isLoading}
              placeholder="Ë´ãËº∏ÂÖ•ÊÇ®ÁöÑÂØÜÁ¢º"
            />
            <button
              type="button"
              onClick={() => setShowPassword(!showPassword)}
              className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 transition-colors"
              disabled={isLoading}
            >
              {showPassword ? (
                <Image src="/eyes.png" alt="Èö±ËóèÂØÜÁ¢º" width={12} height={12} />
              ) : (
                <PiEyesFill />
              )}
            </button>
          </div>
        </div>

        <div className="flex items-center justify-end mb-4">
          <button
            onClick={() => setShowForgotPassword(true)}
            className="inline-block align-baseline font-medium text-base sm:text-lg text-[#555555] hover:text-[#a9ba5c] transition-colors"
            disabled={isLoading}
          >
            ÂøòË®òÂØÜÁ¢ºÔºü
          </button>
        </div>

        {/* <div className="flex justify-center gap-4 w-full">
          <Button
            variant="outline"
            className="w-full sm:w-70 h-10 mt-5 rounded-[60px]"
            onClick={handleGoogleLogin}
            disabled={isGoogleLoading || isLoading}
          >
            {isGoogleLoading ? (
              <div className="w-5 h-5 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin"></div>
            ) : (
              <Image
                src="/Google.svg"
                alt="Google Icon"
                width={20}
                height={20}
              />
            )}
          </Button>
        </div> */}

        <div className="w-full flex justify-center mt-3">
          <Button
            className="w-full sm:w-70 h-12 mt-4 transition-all duration-200 hover:opacity-90 disabled:opacity-50"
            type="button"
            onClick={handleLogin}
            rounded="login"
            disabled={isLoading || isGoogleLoading}
          >
            {isLoading ? (
              <div className="flex items-center justify-center">
                <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                ÁôªÂÖ•‰∏≠...
              </div>
            ) : (
              "ÊúÉÂì°ÁôªÂÖ•"
            )}
          </Button>
        </div>
      </div>
    </div>
  );
}

export default LoginModal;
